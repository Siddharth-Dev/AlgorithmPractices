package projectEuler;

import java.util.HashSet;
import java.util.Set;

public class Q012HighlyDivisibleTriangularNumber {

	/**
	 * The sequence of triangle numbers is generated by adding the natural
	 * numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
	 * 28. The first ten terms would be:
	 * 
	 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * 
	 * Let us list the factors of the first seven triangle numbers:
	 * 
	 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
	 * 1,2,4,7,14,28 We can see that 28 is the first triangle number to have
	 * over five divisors.
	 * 
	 * What is the value of the first triangle number to have over five hundred
	 * divisors?
	 * 
	 * */
	
	private static long calledTimes = 0;
	
	public static Set<Long> divisors(long n) {
		Set<Long> set = new HashSet<Long>();
		for (long i = 1; i <= Math.sqrt(n); i++) {
			calledTimes++;
			if (n % i == 0) {
				set.add(i);
				set.add(n / i);
			}
		}
		return set;
	}
	
	public static void main(String [] args) {
		Set<Long> set = null;
		long sum = 1, start = 2, startTime = System.currentTimeMillis();
		int maxSize = 500;
		while (set == null || set.size() <= maxSize) {
			// System.out.print(sum + " ");
			calledTimes++;
			sum += start++;
			set = divisors(sum);
		}
		System.out.println();
		System.out.println("sum: " + sum);
		System.out.println("set size is: " + set.size());
		System.out.println("calledTimes: " + calledTimes);
		System.out.println("running Time: " + (System.currentTimeMillis() - startTime) + "ms");
		// System.out.println("set: " + set);
	}
}
